class(iris)
apply(iris, 2, mean) # Contiene la variable "Species"
apply(iris[, 1:4], 2, mean) # Solo contiene las variables num√©ricas
# ===== Question 3 =====
head(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
# ===== Question 4 =====
medias_hp_cilindro <- sapply(split(mtcars$hp, mtcars$cyl), mean)
abs(medias_hp_cilindro[1] - medias_hp_cilindro[3])
?bin
?rbin
?rbin()
?rbinom
pbinom(12, 100, .1)
pbinom(12, 100, .1) - pbinom(10, 100, .1)
pbinom(22, 100, .1) - pbinom(20, 100, .1)
pbinom(22, 100, 2/10) - pbinom(20, 100, 2/10)
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
install.packages(c("boot", "class", "cluster", "codetools", "data.table", "httr", "jsonlite", "KernSmooth", "labeling", "maps", "MASS", "mgcv", "Rcpp", "RCurl", "spam", "swirl", "testthat", "xlsx", "xlsxjars"))
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = F)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "IN" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(httr)
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("quiz2", "041fe7d5df66f8834c1b", secret="85ab3505e732f175f8f4369367ee4db1abdbe4a6")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[5]]$name, output[[5]]$creat)
conexion <- url("http://biostat.jhsph.edu/~jleek/contact.html")
HTMLCode <- readLines(conexion)
close(conexion)
class(HTMLCode)
head(HTMLCode)
nchar(HTMLCode[10])
nchar(HTMLCode[20])
nchar(HTMLCode[30])
nchar(HTMLCode[100])
con <- url("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf(file=con, skip=4, widths=c(11,8,4,9,4,9,4,9,4))
close(con)
sum(data_fwf[, 4])
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
library(dplyr)
cran <- tbl_df()
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package)
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
??chain
submit()
submit()
submit()
submit()
swirl()
library(swirl)
swirl()
0
exit()
exit
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(packgae = lubridate)
help(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
day(this_day)
wday(this_day)
wday(this_day, label = T)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989-04-17")
ymd("1989 May 17")
myd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("192012--")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = hour(now()), minutes = minute(now()))
this_moment
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + munites(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
mdy("June 17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
dir_work <- "~/Desktop/repos/datasciencecoursera/Getting and Cleaning Data/assignment_2"
setwd(dir_work)
require(dplyr) # Install (if is the case) and load dplyr package for data manipulation
# ========== Download the data ==========
if(!file.exists("data.zip")){
url_file <- "http://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url_file, "data.zip")
}
# Unzip the data if the data isn't already unziped
if(!file.exists("UCI HAR Dataset")){
unzip("data.zip")
}
# ========== Read the data from .txt files ==========
data_train <- read.table("./UCI HAR Dataset/train/x_train.txt")
label_train <- read.table("./UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
data_test <- read.table("./UCI HAR Dataset/test/x_test.txt")
label_test <- read.table("./UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
# ========== 1 Merge the data from test and train ==========
data_joined <- rbind(data_train, data_test) # Join the train and test data in one set
label_joined <- rbind(label_train, label_test) # Join the train and test labels in one set
subject_joined <- rbind(subject_train, subject_test) # Join the train and test subjects in one set
# ========== 2 Extracting the mean and std measurements ==========
# Load the features from the file and make it readable
features <- read.table("./UCI HAR Dataset/features.txt")
features[, 2] <- gsub("\\(\\)", "", features[, 2]) # remove "()" in column names
features[, 2] <- gsub("-", " ", features[, 2]) # remove "-" in column names
# Extract only features releated with mean or standard deviation
mean_index <- grep("mean | std", features[, 2])
# Keep only the features releated with mean or standard deviation
data_joined <- data_joined[, mean_index]
# ========== 4 Name the activities and subjects in the data set ==========
activity <- read.table("./UCI HAR Dataset/activity_labels.txt")
label_joined <- tolower(activity[label_joined[, 1], 2])
# Merge the sets into an only tidy data set
tidy_data <- cbind(subject_joined, label_joined, data_joined)
# ========== 3 Name the variables with descriptive names ==========
names(tidy_data) <- c("subject", "activity", as.character(features[mean_index, 2]))
tidy_data <- arrange(tidy_data, subject, activity)
new_data <- tidy_data
heaed(new_data)
heed(new_data)
head(new_data)
by_subj <- group_by(new_data, subject)
summarise(by_subj, mean(by_subj[, 1]))
warnings()
by_subj[, 3]
by_subj
names(by_subj)
summarise(by_subj, mean(names(by_subj)[1]))
cars
mtcars
names(new_data)
names(new_data)[1]
summarise(group_by(new_data, subject), mean(names(new_data)[3]))
group_by(new_data, subject)
names(new_data)[3]
summarise(group_by(new_data, subject), mean(names(new_data)[3]))
summarise(group_by(new_data, subject), mean(names(new_data)[4]))
summarise(group_by(new_data, activity), mean(names(new_data)[4]))
group_by(new_data, activity)[, 3]
group_by(new_data, activity)
class(group_by(new_data, activity))
by_subj <- group_by(new_data, subject)
by_subj$tBodyAcc mean X
by_subj$"tBodyAcc mean X"
by_subj[, 3]
by_subj
summarise(by_subj)
summarise(by_subj, mean())
summarise(by_subj, mean(by_subj))
summarise(by_subj, mean("tBodyAcc mean X"))
summarise(mtcars, mean(disp))
mtcars
group_by(mtcars, cyl)
summarise(group_by(mtcars, cyl), mean(disp))
mean(disp)
names(by_subj)
names(by_subj)[-(1:2)]
names(by_subj)[-(1:2)][1]
summarise(by_subj, mean(names(by_subj)[-(1:2)][1]))
summarise(by_subj, mean(names(by_subj)[-(1:2)][1], na.rm = T))
mean(group_by(new_data, subject))
new_data %>%
group_by(subject) %>%
summarise(mean(tBodyAcc mean X))
new_data %>%
group_by(subject) %>%
summarise(mean("tBodyAcc mean X"))
warnings()
summarise(mean(1))
names(new_data) <- 1:(ncol(new_data))
names(new_data)
new_data %>%
group_by(subject) %>%
summarise(mean(3))
a:(ncol(new_data))
"a":(ncol(new_data))
new_data %>%
group_by(subject) %>%
summarise(mean("3"))
new_data <- tidy_data
df <- data.frame(a=sample(1:5, 10, replace=T),
b=sample(1:5, 10, replace=T),
c=sample(1:5, 10, replace=T),
d=sample(1:5, 10, replace=T),
grp=sample(1:3, 10, replace=T))
df
df %.% group_by(grp) %.% summarise(mean(a))
df %>% group_by(grp) %>% summarise(mean(a))
df
df %>% group_by(grp) %>% summarise(mean(a))
label_joined
features
as.character(features[mean_index, 2])
paste(as.character(features[mean_index, 2]), collapse = "_")
as.character(features[mean_index, 2])
collapse(as.character(features[mean_index, 2]))
split(new_data, subject)
split(new_data, new_data$subject)
features <- read.table("./UCI HAR Dataset/features.txt")
features[, 2] <- gsub("\\(\\)", "", features[, 2]) # remove "()" in column names
features[, 2] <- gsub("-", "", features[, 2]) # remove "-" in column names
mean_index <- grep("mean | std", features[, 2])
# Keep only the features releated with mean or standard deviation
data_joined <- data_joined[, mean_index]
# ========== 4 Name the activities and subjects in the data set ==========
activity <- read.table("./UCI HAR Dataset/activity_labels.txt")
label_joined <- tolower(activity[label_joined[, 1], 2])
# Merge the sets into an only tidy data set
tidy_data <- cbind(subject_joined, label_joined, data_joined)
# ========== 3 Name the variables with descriptive names ==========
as.character(features[mean_index, 2])
names(tidy_data) <- c("subject", "activity", )
tidy_data <- arrange(tidy_data, subject, activity)
new_data <- tidy_data
names(new_data)
data_joined <- rbind(data_train, data_test) # Join the train and test data in one set
label_joined <- rbind(label_train, label_test) # Join the train and test labels in one set
subject_joined <- rbind(subject_train, subject_test) # Join the train and test subjects in one set
# ========== 2 Extracting the mean and std measurements ==========
# Load the features from the file and make it readable
features <- read.table("./UCI HAR Dataset/features.txt")
features[, 2] <- gsub("\\(\\)", "", features[, 2]) # remove "()" in column names
features[, 2] <- gsub("-", "", features[, 2]) # remove "-" in column names
# Extract only features releated with mean or standard deviation
mean_index <- grep("mean | std", features[, 2])
# Keep only the features releated with mean or standard deviation
data_joined <- data_joined[, mean_index]
# ========== 4 Name the activities and subjects in the data set ==========
activity <- read.table("./UCI HAR Dataset/activity_labels.txt")
label_joined <- tolower(activity[label_joined[, 1], 2])
# Merge the sets into an only tidy data set
tidy_data <- cbind(subject_joined, label_joined, data_joined)
# ========== 3 Name the variables with descriptive names ==========
as.character(features[mean_index, 2])
names(tidy_data) <- c("subject", "activity", )
tidy_data <- arrange(tidy_data, subject, activity)
names(tidy_data)
data_joined <- rbind(data_train, data_test) # Join the train and test data in one set
label_joined <- rbind(label_train, label_test) # Join the train and test labels in one set
subject_joined <- rbind(subject_train, subject_test) # Join the train and test subjects in one set
features <- read.table("./UCI HAR Dataset/features.txt")
features[, 2] <- gsub("\\(\\)", "", features[, 2]) # remove "()" in column names
features[, 2] <- gsub("-", "", features[, 2]) # remove "-" in column names
features[, 2]
features <- read.table("./UCI HAR Dataset/features.txt")
features[, 2] <- gsub("\\(\\)", "", features[, 2]) # remove "()" in column names
features[, 2] <- gsub("-", "_", features[, 2]) # remove "-" in column names
features[, 2]
mean_index <- grep("mean | std", features[, 2])
mean_index
mean_index <- grep("_mean_ | _std_", features[, 2])
mean_index
mean_index <- grep("mean_ | std_", features[, 2])
mean_index
features[, 2]
features <- read.table("./UCI HAR Dataset/features.txt")
features
features[, 2] <- gsub("\\(\\)", "", features[, 2]) # remove "()" in column names
features[, 2] <- gsub("-", " ", features[, 2]) # remove "-" in column names
features[, 2]
mean_index <- grep("mean | std", features[, 2])
mean_index
features <- read.table("./UCI HAR Dataset/features.txt")
features[, 2] <- gsub("\\(\\)", "", features[, 2]) # remove "()" in column names
features[, 2] <- gsub("-", "", features[, 2]) # remove "-" in column names
mean_index <- grep("mean | std", features[, 2])
mean_index
features[, 2]
mean_index <- grep("mean|std", features[, 2])
mean_index
mean_index <- grep("mean|std", features[, 2])
data_joined <- data_joined[, mean_index]
activity <- read.table("./UCI HAR Dataset/activity_labels.txt")
label_joined <- tolower(activity[label_joined[, 1], 2])
tidy_data <- cbind(subject_joined, label_joined, data_joined)
as.character(features[mean_index, 2])
names(tidy_data) <- c("subject", "activity", as.character(features[mean_index, 2]))
tidy_data <- arrange(tidy_data, subject, activity)
new_data <- tidy_data
names(new_data)
new_data %>%
group_by(subject) %>%
summarise(mean(names(new_data)[3]))
names(tidy_data)
features <- read.table("./UCI HAR Dataset/features.txt")
features[, 2] <- gsub("\\(\\)", "", features[, 2]) # remove "()" in column names
features[, 2] <- gsub("-", " ", features[, 2]) # remove "-" in column names
# Extract only features releated with mean or standard deviation
mean_index <- grep("mean | std", features[, 2])
mean_index
data_joined <- data_joined[, mean_index]
activity <- read.table("./UCI HAR Dataset/activity_labels.txt")
label_joined <- tolower(activity[label_joined[, 1], 2])
# Merge the sets into an only tidy data set
tidy_data <- cbind(subject_joined, label_joined, data_joined)
# ========== 3 Name the variables with descriptive names ==========
names(tidy_data) <- c("subject", "activity", as.character(features[mean_index, 2]))
names(tidy_data)
mean_index <- grep("mean | std", features[, 2])
data_joined <- data_joined[, mean_index]
mean_index
data_joined <- rbind(data_train, data_test) # Join the train and test data in one set
label_joined <- rbind(label_train, label_test) # Join the train and test labels in one set
subject_joined <- rbind(subject_train, subject_test) # Join the train and test subjects in one set
features <- read.table("./UCI HAR Dataset/features.txt")
mean_index <- grep("mean | std", features[, 2])
mean_index
?grep
mean_index <- ?grep("mean|std", features[, 2])
mean_index
mean_index
mean_index <- grep("mean|std", features[, 2])
mean_index
features[, 2]
features <- read.table("./UCI HAR Dataset/features.txt")
features[, 2] <- gsub("\\(\\)", "", features[, 2]) # remove "()" in column names
features[, 2] <- gsub("-", " ", features[, 2]) # remove "-" in column names
mean_index <- grep("mean|std", features[, 2])
mean_index
activity <- read.table("./UCI HAR Dataset/activity_labels.txt")
label_joined <- tolower(activity[label_joined[, 1], 2])
tidy_data <- cbind(subject_joined, label_joined, data_joined)
names(tidy_data) <- c("subject", "activity", as.character(features[mean_index, 2]))
tidy_data <- arrange(tidy_data, subject, activity)
names(tidy_data)
data_joined <- rbind(data_train, data_test) # Join the train and test data in one set
label_joined <- rbind(label_train, label_test) # Join the train and test labels in one set
subject_joined <- rbind(subject_train, subject_test) # Join the train and test subjects in one set
# ========== 2 Extracting the mean and std measurements ==========
# Load the features from the file and make it readable
features <- read.table("./UCI HAR Dataset/features.txt")
features[, 2] <- gsub("\\(\\)", "", features[, 2]) # remove "()" in column names
features[, 2] <- gsub("-", " ", features[, 2]) # remove "-" in column names
# Extract only features releated with mean or standard deviation
mean_index <- grep("mean|std", features[, 2])
# Keep only the features releated with mean or standard deviation
data_joined <- data_joined[, mean_index]
# ========== 4 Name the activities and subjects in the data set ==========
activity <- read.table("./UCI HAR Dataset/activity_labels.txt")
label_joined <- tolower(activity[label_joined[, 1], 2])
# Merge the sets into an only tidy data set
tidy_data <- cbind(subject_joined, label_joined, data_joined)
# ========== 3 Name the variables with descriptive names ==========
names(tidy_data) <- c("subject", "activity", as.character(features[mean_index, 2]))
tidy_data <- arrange(tidy_data, subject, activity)
names(tidy_data)
data_joined <- rbind(data_train, data_test) # Join the train and test data in one set
label_joined <- rbind(label_train, label_test) # Join the train and test labels in one set
subject_joined <- rbind(subject_train, subject_test) # Join the train and test subjects in one set
# ========== 2 Extracting the mean and std measurements ==========
# Load the features from the file and make it readable
features <- read.table("./UCI HAR Dataset/features.txt")
features[, 2] <- gsub("\\(\\)", "", features[, 2]) # remove "()" in column names
features[, 2] <- gsub("-", "_", features[, 2]) # remove "-" in column names
# Extract only features releated with mean or standard deviation
mean_index <- grep("mean|std", features[, 2])
# Keep only the features releated with mean or standard deviation
data_joined <- data_joined[, mean_index]
# ========== 4 Name the activities and subjects in the data set ==========
activity <- read.table("./UCI HAR Dataset/activity_labels.txt")
label_joined <- tolower(activity[label_joined[, 1], 2])
# Merge the sets into an only tidy data set
tidy_data <- cbind(subject_joined, label_joined, data_joined)
# ========== 3 Name the variables with descriptive names ==========
names(tidy_data) <- c("subject", "activity", as.character(features[mean_index, 2]))
tidy_data <- arrange(tidy_data, subject, activity)
names(tidy_data)
new_data <- tidy_data
new_data %>%
group_by(subject) %>%
summarise(mean(tBodyAcc_mean_X))
names(new_data)
names(new_data)[3]
new_data %>%
group_by(subject) %>%
summarise(mean(names(new_data)[3]))
print(names(new_data))
print(names(new_data), no.quotes = T)
new_data %>%
group_by(subject) %>%
summarise(mean(tBodyAcc_mean_X))
names(new_data)
as.factor(names(new_data))
as.factor(names(new_data))[3]
new_data %>%
group_by(subject) %>%
summarise(mean(as.factor(names(new_data))[3]))
new_data %>%
group_by(subject) %>%
summarise(mean(tBodyAcc_mean_X))
new_data %>%
group_by(subject, activity) %>%
summarise(mean(tBodyAcc_mean_X))
new_data %>%
group_by(subject, activity) %>%
summarise_each(funs(mean))
average_tidy_data <- new_data %>%
group_by(subject, activity) %>%
summarise_each(funs(mean))
average_tidy_data
View(average_tidy_data)
write.table(average_tidy_data, "average_tidy_data.txt")
write.table(average_tidy_data, "average_tidy_data.txt", row.names = FALSE)
