source(paste(ruta, "R/swaps2_plazo.R", sep=""), encoding="UFT-8")
source(paste(ruta, "R/swaps3_plazo.R", sep=""), encoding="UFT-8")
source(paste(ruta, "R/swaps4_plazo.R", sep=""), encoding="UFT-8")
s1 <- swaps1_plazo()
s2 <- swaps2_plazo()
s3 <- swaps3_plazo()
s4 <- swaps4_plazo()
# ===== JUNTA =====
s1$SECCION <- "I"
s2$SECCION <- "II"
s3$SECCION <- "III"
s4$SECCION <- "VI"
# Selecciona las columnas de interes
columnas <- c("INSTI", "FE_CON_OPE", "TIPO_INST", "IMPORTE", "BANDA", "SECCION")
swaps <- data.frame(matrix(NA, nrow=sum(nrow(s1), nrow(s2), nrow(s3),
nrow(s4)), ncol=12))
colnames(swaps) <- c("INSTI", "FE_CON_OPE", "C_IMP_BASE", "MDA_IMP",
"FE_VEN_ORI", "FE_LIQ_ORI", "TIPO_INST", "UDIS", "FIX",
"IMPORTE", "BANDA", "SECCION")
swaps$SECCION <- c(s1$SECCION, s2$SECCION, s3$SECCION, s4$SECCION)
swaps[swaps$SECCION=="I", ] <- s1[, 1:12]
swaps[swaps$SECCION=="II", columnas] <- s2[, columnas]
swaps[swaps$SECCION=="III", columnas] <- s3[, columnas]
swaps[swaps$SECCION=="VI", columnas] <- s4[, columnas]
write.dbf(swaps, paste("swaps_plazo_", format(Sys.Date()[1], "%d_%m_%Y"), ".dbf", sep=""))
}
swapsp_junta("/Volumes/IAN 1/Estadisticas/Plazo/")
swapsp_junta("/Volumes/IAN 1/Estadisticas/Plazo/")
c
c
c
c
c
c
c
n
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c()
swapsp_junta("/Volumes/IAN 1/Estadisticas/Plazo/")
ruta="/Volumes/IAN 1/Estadisticas/Plazo/"
library("foreign", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
off_plazo <- read.dbf("/Volumes/IAN/Estadisticas/Plazo/OFF/off_plazo_03072014.dbf")
swaps_plazo <- read.dbf("/Volumes/IAN/Estadisticas/Plazo/SWAPS/swaps_plazo_03072014.dbf")
swaps_plazo <- read.dbf("/Volumes/IAN/Estadisticas/Plazo/SWAPS/swaps_plazo_03_07_2014.dbf")
opto_plazo <- read.dbf("/Volumes/IAN/Estadisticas/Plazo/OPTO/opto_plazo_03072014.dbf")
off_contra <- read.dbf("/Volumes/IAN/Estadisticas/Contraparte/OFF/off_plazo_03072014.dbf")
off_contra <- read.dbf("/Volumes/IAN/Estadisticas/Contraparte/OFF/off_contra_03072014.dbf")
swaps_contra <- read.dbf("/Volumes/IAN/Estadisticas/Contraparte/SWAPS/swaps_contra_03_07_2014.dbf")
swaps_contra <- read.dbf("/Volumes/IAN/Estadisticas/Contraparte/SWAPS/swaps_contra_03072014.dbf")
opto_contra <- read.dbf("/Volumes/IAN/Estadisticas/Contraparte/OPTO/opto_contra_03072014.dbf")
ls()
ls()[1]
apply(ls()[1], 2, function(x) any(is.na(x)))
apply(off_plazo, 2, function(x) any(is.na(x)))
apply(off_contra, 2, function(x) any(is.na(x)))
entidad <- off_contra[is.na(off_contra$TIPO_ENTE), ]
residencia <- off_contra[is.na(off_contra$RESI), ]
sector <- off_contra[is.na(off_contra$SECTOR), ]
View(entidad)
View(sector)
levels(as.factor(entidad$CLASE_OPE))
levels(as.factor(sector$CLASE_OPE))
entidad <- split(entidad, entidad$CLASE_OPE)
View(entidad$FORWARD)
View(entidad$FUTURO)
levels(as.factor(entidad$CLASE_OPE))
levels(as.factor(sector$CLASE_OPE))
entidad$FORWARD$CLASE_OPE
entidad <- off_contra[is.na(off_contra$TIPO_ENTE), ]
residencia <- off_contra[is.na(off_contra$RESI), ]
sector <- off_contra[is.na(off_contra$SECTOR), ]
levels(as.factor(sector$CLASE_OPE))
View(sector)
sector_idspot <- sector[sector$ID_SPOT=="S", ]
apply(sector, 2, function(x) any(is.na(x)))
install.packages("Rserve")
library("Rserve", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
Rserve()
library()
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
Rserve()
install.packages(c("mgcv", "yaml"))
palindrome <- function(p){
for(i in 1:floor(nchar(p)/2)){
r <- nchar(p) - i + 1
if(substr(p, i, i) != substr(p, r, r)) {
"Esto no es un palindromo"
}
}
"Esto es un palindromo"
}
palindromo <- function(p){
for(i in 1:floor(nchar(p)/2)){
r <- nchar(p) - i + 1
if(substr(p, i, i) != substr(p, r, r)) {
"Esto no es un palindromo"
}
}
"Esto es un palindromo"
}
rm(palindrome)
palindromo("Hola")
?floor
p="Hola"
nchar(p)
nchar(p)/2
floor(nchar(p)/2)
1:floor(nchar(p)/2)
i=1
nchar(p) - i + 1
r <- nchar(p) - i + 1
substr(p, i, i)
substr(p, r, r)
i=2
r <- nchar(p) - i + 1
r
substr(p, i, i)
substr(p, r, r)
palindromo <- function(p){
for(i in 1:floor(nchar(p)/2)){
r <- nchar(p) - i + 1
if(substr(p, i, i) != substr(p, r, r)){
"Esto no es un palindromo"
} else{
"Esto es un palindromo"
}
}
}
palindromo("Hola")
palindromo <- function(p) {
for(i in 1:floor(nchar(p)/2) ) {
r <- nchar(p) - i + 1
if ( substr(p, i, i) != substr(p, r, r) ) return(FALSE)
}
TRUE
}
palindromo("Hola")
palindromo("Ana")
palindromo("reconocer")
palindromo <- function(p) {
for(i in 1:floor(nchar(p)/2) ) {
r <- nchar(p) - i + 1
if ( substr(p, i, i) != substr(p, r, r) ) return("Intentalo de nuevo")
}
"Felicidades! Tienes un palindromo en tus manos"
}
palindromo("reconocer")
conexion <- url("http://biostat.jhsph.edu/~jleek/contact.html")
HTMLCode <- readLines(conexion)
close(conexion)
head(HTMLCode)
HTMLCode[10]
nchar(HTMLCode[10])
nchar((HTMLCode)[10, 20, 30, 100])
nchar(HTMLCode[20])
nchar(HTMLCode[10])
nchar(HTMLCode[20])
nchar(HTMLCode[30])
nchar(HTMLCode[100])
class(HTMLCode)
dim(HTMLCode)
read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
?read.fwf
data_fwf <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", widths = c(1, 2, 3))
data_fwf <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(data_fwf)
sum(head(data_fwf)[, 4])
class(data_fwf)
apply(data_fwf, 2, sum)
apply(data_fwf, 2, sum())
apply(data_fwf, 2, sum
)
str(data_fwf)
apply(data_fwf[-1], 2, sum)
View(data_fwf)
View(data_fwf)
apply(data_fwf[6, 7], 2, sum)
data_fwf[6, 7]
apply(data_fwf[, c(6, 7)], 2, sum)
sum(apply(data_fwf[, c(6, 7)], 2, sum))
sum(apply(data_fwf[, c(8, 9)], 2, sum))
sum(apply(data_fwf[, c(6, 7)], 2, sum))
apply(data_fwf[, c(6, 7)], 2, sum)
data_fwf <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
close(con)
close(con)
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf(file=con, skip=4, widths=c(12,7,4,9,4,9,4,9,4))
close(con)
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf(file=con, skip=4, widths=c(12,7,4,9,4,9,4,9,4))
close(con)
con <- url("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf(file=con, skip=4, widths=c(12,7,4,9,4,9,4,9,4))
close(con)
head(data_fwf)
class(data_fwf)
str(data_fwf)
apply(data_fwf[, c(6, 7)], 2, sum)
sum(apply(data_fwf[, c(6, 7)], 2, sum))
sum(apply(data_fwf[, c(8, 9)], 2, sum))
View(data_fwf)
sum(apply(data_fwf[, c(8, 9)], 2, sum))
con <- url("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf(file=con, skip=4, widths=c(11,9,4,9,4,9,4,9,4))
close(con)
View(data_fwf)
con <- url("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf(file=con, skip=4, widths=c(11,8,4,9,4,9,4,9,4))
close(con)
con <- url("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf(file=con, skip=4, widths=c(11,8,4,9,4,9,4,9,4))
close(con)
View(data_fwf)
apply(data_fwf[, c(8, 9)], 2, sum)
sum(apply(data_fwf[, c(8, 9)], 2, sum))
close(con)
con <- url("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf(file=con, skip=4, widths=c(11,8,4,9,4,9,4,9,4))
close(con)
View(data_fwf)
sum(apply(data_fwf[, c(8, 9)], 2, sum))
sum(data_fwf[, 4])
library(httr)
require(httpuv)
install.packages(c("httpuv", "jsonlite"))
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret="6af1109f6ecf442d292425087d49bb13d9bbe9c8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("quiz2", "041fe7d5df66f8834c1b", secret="85ab3505e732f175f8f4369367ee4db1abdbe4a6")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
output[[4]]
output[[4]]$name
lala <- output[[4]]
lala$created_at
lala$creat
list(output[[5]]$name, output[[5]]$creat)
conexion <- url("http://biostat.jhsph.edu/~jleek/contact.html")
HTMLCode <- readLines(conexion)
close(conexion)
class(HTMLCode)
head(HTMLCode)
nchar(HTMLCode[10])
nchar(HTMLCode[20])
nchar(HTMLCode[30])
nchar(HTMLCode[100])
con <- url("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf(file=con, skip=4, widths=c(11,8,4,9,4,9,4,9,4))
close(con)
sum(data_fwf[, 4])
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
fecha_ini <- as.Date("01/01/2014", format = "%d/%m/%Y")
fechas <- fecha_ini + (1:plazo)
plazo = 100
fecha_ini <- as.Date("01/01/2014", format = "%d/%m/%Y")
fechas <- fecha_ini + (1:plazo)
fechas
fechas <- fecha_ini + (0:plazo)
fechas
fechas <- fecha_ini + 0:(plazo-1)
fechas
beca <- fechas[format(fechas, "%d")=="01"]
beca
beca <- fechas[format(fechas, "%d")=="1"]
beca
beca <- fechas[format(fechas, "%d")=="01"]
beca
beca <- data.frame(dates=fechas[format(fechas, "%d")=="01"])
beca
beca$cantidad <- 1000
data$inc <- 1
beca$inc <- 1
beca$exp <- 0
beca$exp[data$inc==0] <- 1
View(beca)
beca$concepto <- "Aqui va un concepto"
View(beca)
beca <- data.frame(dates=fechas[format(fechas, "%d")==1])
beca
beca <- data.frame(dates=fechas[format(fechas, "%d")=="01"])
beca$cantidad <- 1000
recurrentes <- lis(beca=c(), banxico=c(), mesada=c())
recurrentes <- list(beca=c(), banxico=c(), mesada=c())
recurrentes
recurrentes <- list(beca=c(), banxico=c(), mesada=c())
beca <- list(cantidad=1000, fecha_ini=as.Date("01/01/2014", format = "%d/%m/%Y"), tipo=1)
banxico <- list(cantidad=1000, fecha_ini=as.Date("28/02/2014", format = "%d/%m/%Y"), tipo=1)
mesada <- list(cantidad=, fecha_ini=as.Date("05/01/2014", format = "%d/%m/%Y"), tipo=1)
mesada <- list(cantidad=500, fecha_ini=as.Date("05/01/2014", format = "%d/%m/%Y"), tipo=1)
recurrentes <- list(beca=beca, banxico=banxico, mesada=mesada)
recurrentes
library(datasets)
data(iris)
?iris
data(mtcars)
?mtcars
head(iris)
levels(iris$Species)
medias <- sapply(split(iris, iris$Species), function(x) colMeans(x[, colnames(iris)[1:4]]))
medias["Sepal.Length", "virginica"]
virginica <- split(iris, iris$Species)$virginica
mean(virginica$Sepal.Length)
mean(iris$Sepal.Length[iris$Species=="virginica"])
# ===== Question 2 =====
class(iris)
apply(iris, 2, mean) # Contiene la variable "Species"
apply(iris[, 1:4], 2, mean) # Solo contiene las variables numéricas
# ===== Question 3 =====
head(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
# ===== Question 4 =====
medias_hp_cilindro <- sapply(split(mtcars$hp, mtcars$cyl), mean)
abs(medias_hp_cilindro[1] - medias_hp_cilindro[3])
?bin
?rbin
?rbin()
?rbinom
pbinom(12, 100, .1)
pbinom(12, 100, .1) - pbinom(10, 100, .1)
pbinom(22, 100, .1) - pbinom(20, 100, .1)
pbinom(22, 100, 2/10) - pbinom(20, 100, 2/10)
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
install.packages(c("boot", "class", "cluster", "codetools", "data.table", "httr", "jsonlite", "KernSmooth", "labeling", "maps", "MASS", "mgcv", "Rcpp", "RCurl", "spam", "swirl", "testthat", "xlsx", "xlsxjars"))
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = F)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "IN" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(httr)
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("quiz2", "041fe7d5df66f8834c1b", secret="85ab3505e732f175f8f4369367ee4db1abdbe4a6")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[5]]$name, output[[5]]$creat)
conexion <- url("http://biostat.jhsph.edu/~jleek/contact.html")
HTMLCode <- readLines(conexion)
close(conexion)
class(HTMLCode)
head(HTMLCode)
nchar(HTMLCode[10])
nchar(HTMLCode[20])
nchar(HTMLCode[30])
nchar(HTMLCode[100])
con <- url("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf(file=con, skip=4, widths=c(11,8,4,9,4,9,4,9,4))
close(con)
sum(data_fwf[, 4])
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
library(dplyr)
cran <- tbl_df()
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package)
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
??chain
submit()
submit()
submit()
submit()
setwd("~/Desktop/repos/datasciencecoursera/Getting and Cleaning Data")
if(!file.exists("communities.csv")){
url_file <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url_file, "communities.csv")
}
data <- read.csv("communities.csv")
agricultureLogical <- data$ACR ==3 & data$AGS == 6
which(agricultureLogical) # Devuelve el índice en el que TRUE aparece
which(agricultureLogical)[3] # Devuelve el índice en el que TRUE aparece
which(agricultureLogical)[1:3] # Devuelve el índice en el que TRUE aparece
library(jpeg)
if(!file.exists("pic.jpg")){
url_pic <- "http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(url_pic, "pic.jpg")
}
picture <- readJPEG("pic.jpg", native = T)
quantile(picture, c(.30))
quantile(picture, c(.80))
if(!file.exists("gross.csv")){
url_file <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(url_file, "gross.csv")
}
if(!file.exists("educational.csv")){
url_file <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(url_file, "educational.csv")
}
data_gross <- read.csv("gross.csv", as.is = T)
data_gross <- data_gross[5:194, c(1,2,4,5)]
colnames(data_gross) <- c("Country", "Ranking", "Name", "US Dollars")
data_gross$Ranking <- as.numeric(data_gross$Ranking)
data_educational <- read.csv("educational.csv", as.is = T)
data_gross <- data_gross[data_gross$Country %in% data_educational$CountryCode, ]
data_educational <- data_educational[data_educational$CountryCode %in% data_gross$Country, ]
data_educational <- data_educational[match(data_gross$Country, data_educational$CountryCode), ]
data <- cbind(data_gross, data_educational)
sort_data <- data[sort(data$Ranking, decreasing = T), ]
View(sort_data)
match(data_gross$Country, data_educational$CountryCode)
View(sort_data)
mean(data$"Ranking"[data$Income.Group == "High income: OECD"])
mean(data$"Ranking"[data$Income.Group == "High income: nonOECD"])
data$ranking_data <- cut(data$Ranking, quantile(data$Ranking, c(0, 0.20, 0.40, 0.60, 0.80, 1)))
sum(data$Income.Group == "Lower middle income" & data$ranking_data == levels(data$ranking_data)[1])
