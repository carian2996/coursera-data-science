== But who am I, I need know == 

1. How can you efficiently store an n-gram model (think Markov Chains)?

Conditional probabilities
=========================

P(But who am I, I need) ~ P(But who am I, I need)
            P(but who am i i need)
            = P(need | but who am i i) P(but who am i i)
            ...
            = P(need | but who am i i) * P(i | but who am i) * P (i | but who am) *
              P(am | but who) * P(who | but) * P(but)
      (Markov)  = P(need | i) * P(i | i) * P(i | am) * P(am | who) * P(who | but) * P(but)

Log aproximation
================

Log(P(But who am I, I need)) ~ LogP(need | i) + LogP(i | i) + LogP(i | am) 
                + LogP(am | who) + LogP(who | but) + LogP(but)

2. How can you use the knowledge about word frequencies to make your model smaller and more efficient?

  unigram table
======================
word    frequency
======================
am      1
access    2
but     3
bear    2
come    3
dust    2
I       1
need    4
know    2
who     3

  bigram table
======================
word    frequency
======================
I     am      1
to    access    2
but   what    3
.   .     .
.   .     .
.   .     .

  trigram table
======================
word    frequency
======================
.   .     .
.   .     .
.   .     .

INPUT:
But who am I, I need # Phrase 

But who am I I need # Eliminate punctuation
But who need # Eliminate stopwords
but who need # To lower case

# Split the phrase
but 
who 
need

# Make the bigrams in revers
but         # unigram
but who       # first bigram
  who need    # second bigram
    need [word] # third bigram

P( . | but who need )   = P( but who need . ) / P( but who need )
We have, 
P( but who need . ) ~ exp[ LogP( . | need ) + LogP( need | who ) + LogP( who | but ) + LogP( but ) ]
P( but who need ) ~ exp[ LogP( need | who ) + LogP( who | but ) + LogP( but ) ]

Then, 
exp [ P( . | but who need ) ] = P( but who need . ) / P( but who need )

                    LogP( . | need ) + LogP( need | who ) + LogP( who | but ) + LogP( but )
                = ---------------------------------------------------------------------------
                      exp[ LogP( need | who ) + LogP( who | but ) + LogP( but ) ]

                            LogP( . | need )
                = -----------------------------------------------------------
                    LogP( need | who ) + LogP( who | but ) + LogP( but )

                      LogP( need | who ) + LogP( who | but ) + LogP( but )
                + -----------------------------------------------------------
                    LogP( need | who ) + LogP( who | but ) + LogP( but )

                            LogP( . | need )
                = ----------------------------------------------------------- + 1
                    LogP( need | who ) + LogP( who | but ) + LogP( but )

                                LogP( . | need )
                = ----------------------------------------------------------------- + 1
                     SUM_{1}^{n-1} LogP( w_{n - (i-1)} | w_{n - i} ) + LogP( w_0 )    
                     


"But who am I, I need"